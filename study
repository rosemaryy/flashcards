from prettytable import PrettyTable
import random
cards=[]
removed=[]

def user_prompt():
  user_input = input("What would you like to do?\n")
  if user_input.lower()=='-study':
    study()
  elif user_input.lower()=='-list':
    list_cards()
  elif user_input[0:8].lower()=='-remove(' and user_input[len(user_input)-1]==")" and user_input[8:len(user_input)-1].isdigit():
    remove_card(user_input[8:len(user_input)-1])
  elif user_input.lower()=='-listrem':
    list_removed()
  elif user_input.lower()=='-help':
    help()
  elif user_input[0:2]!=',.' and user_input[0:2]!='..' and ',.' in user_input and '..' in user_input:
    if user_input.count(',.')!=user_input.count('..'):
      print("hmm, make sure you have an equal number of ',.' and '..'!")
    else:
      print('adding cards')
      add_card(user_input)
  else:
    print("Error, try again.")
    user_prompt()

def add_card(card_string):
  separated_cards=card_string.split('..')
  for i in range(0, len(separated_cards)-1):
    if separated_cards[i].index(',.')==-1:
      print("Error: "+str(separated_cards[i])+" is not separated into question and answer")
    elif separated_cards[i].count(',.')>1:
      print("Error: "+str(separated_cards[i])+" has too many answers.")
    else:
      if separated_cards[i][len(separated_cards[i])-2:len(separated_cards[i])] ==',.':
        print("Error, make sure there is an answer!")
      else:
        question = separated_cards[i][0:separated_cards[i].index(',.')]
        answer = separated_cards[i][separated_cards[i].index(',.')+2:len(separated_cards[i])]
        cards.append([question, answer, 10])
  user_prompt()

def study(): 
  current_card=showcard()
  study_input=input("to flip, type -f")
  check_study_stop(study_input)
  #current_card=showcard()
  if study_input.lower()!='-f':
    print("error, type -f to flip")
  else:
    print(current_card[1])
    study_input=input("Rate from 1-5.")
    #print("past rate")
    check_study_stop(study_input)
    current_card[2]=int(study_input)
    study()

def check_study_stop(input):
  if input.lower()=='-stop':
    user_prompt()

def showcard():
  temp=[]
  for i in range(0, len(cards)):
    #print(str(cards[i][2])+"=rating")
    #print("the card is "+str(cards[i]))
    for j in range(0, cards[i][2]):
      temp.append(cards[i])
  #print("TEMP")
  #print(temp)
  #print()
  current_card=random.choice(temp)
  print(current_card[0])
  return current_card
  
def list_cards():
  if len(cards)==0:
    print("You currently have no cards")
  else:
    list_table=PrettyTable()
    list_table.field_names=["Index","Question", "Answer", "Rating"]
    for i in range(0, len(cards)):
      list_table.add_row([i, str(cards[i][0]), str(cards[i][1]), str(cards[i][2])])
    print(list_table)
  user_prompt()
  
def remove_card(index):
  index=int(index)
  if index>=len(cards) or index<0:
    print("index out of bounds.")
  else:
    print(str(cards[index])+" has been deleted.")
    removed.append(cards[index])
    cards.remove(cards[index])
  user_prompt()
  
def list_removed():
  if len(removed)==0:
    print("You currently have no removed cards")
  else:
    removed_list_table=PrettyTable()
    removed_list_table.field_names=["Index","Question", "Answer", "Rating"]
    for i in range(0, len(removed)):
      removed_list_table.add_row([i, str(removed[i][0]), str(removed[i][1]), str(removed[i][2])])
    print(removed_list_table)
  user_prompt()
  
def help():
  print("Enter questions and answers in this format: question1,.answer1..question2,.answer2..")
  print("To study and rate cards, type -study.\nTo list all cards, type -list.\nTo remove a card, type -remove(index). The index is shown in list view.\nTo list removed cards, type -listrem.\nTo get help, type -help.")
  print("\nWhile studying, you will first be shown the card's 'front', it's 'question'. \nBy typing -f, the card will flip and show the answer. \nNext, you will be prompted to rate your mastery of the card. \nStop the study session by typing -stop.")
  print("When a new card is entered, its default 'rating' is 10. \nWhile studying, you will rate the cards from 1-5, with 5 being the least understood and 1 being the most understood.")
  user_prompt()

help()
user_prompt()
